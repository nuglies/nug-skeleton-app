'use strict';

nugNgApp.controller('sensorsCtrl', ['$scope', '$http', function($scope, $http) {

  var init = function() {
    // just stick some data on scope
    $scope.now = moment().format("dddd, MMMM Do YYYY, h:mm:ss a");
    $scope.startValue = 5;
	$scope.endValue = 15;
	
	
  };
  
  	//console.log('test single', $scope.test.single);




 
  init();
	


}]);


angular.module('nouislider', []).directive("slider", function() {
  return {
    restrict: "A",
    scope: {
      start: "@",
      step: "@",
      end: "@",
      callback: "@",
      margin: "@",
      ngModel: "=",
      ngFrom: "=",
      ngTo: "=",
      ngBlue: "=",
      ngRed: "="
    },
    link: function(scope, element, attrs) {
   	  var callback, fromParsed, parsedValue, slider, toParsed;
      slider = $(element);
      callback = scope.callback ? scope.callback : 'slide';
      console.log(callback);
      
      
    
    //RED SLIDER
    
   
    //END RED SLIDER
    
    //PAR Slider	
    
   
        fromParsed = null;
        toParsed = null;
        
         if(attrs.id=="PAR") {
        slider.noUiSlider({
          start: [scope.ngFrom || scope.start, scope.ngTo || scope.end],
          step: parseFloat(scope.step || 1),
          connect: true,
          margin: parseFloat(scope.margin || 0),
          range: {
            min: [parseFloat(scope.start)],
            max: [parseFloat(scope.end)]
          }
        });
        
        
        
         } else if(attrs.id=="red") {
         
         
      slider.noUiSlider({
          start: 1,
          orientation: "vertical",
          step: 1,
          direction: "rtl",
          margin: parseFloat(scope.margin || 0),
          range: {
            min: 1,
            max: 100
          }
        });
         }
         else if(attrs.id=="blue") {
         
         
      slider.noUiSlider({
          start: 1,
          orientation: "vertical",
          step: 1,
          direction: "rtl",
          margin: parseFloat(scope.margin || 0),
          range: {
            min: 1,
            max: 100
          }
        });
         }
          //if id
         
         if ((scope.ngFrom != null) && (scope.ngTo != null)) {
        
        slider.on(callback, function() {
          var from, ref, to;
          ref = slider.val(), from = ref[0], to = ref[1];
          console.log(ref);
          
          fromParsed = parseFloat(from);
          toParsed = parseFloat(to);
    	  return scope.$apply(function() {
            scope.ngFrom = fromParsed;
            return scope.ngTo = toParsed;
          });
        });
        
        scope.$watch('ngFrom', function(newVal, oldVal) {
          if (newVal !== fromParsed) {
            return slider.val([newVal, null]);
          }
        });
        
        return scope.$watch('ngTo', function(newVal, oldVal) {
          if (newVal !== toParsed) {
            return slider.val([null, newVal]);
          }
        });
      
      } // PAR 
      else {
      
        slider.on(callback, function() {
          var from, ref;
          ref = slider.val();
      
          
          toParsed = parseFloat(ref);
          
      	  return scope.$apply(function() {
            return scope.ngBlue = toParsed;
          });
        });
		
		
        
      
      
      
      
        
        /*
        scope.$watch('ngFrom', function(newVal, oldVal) {
          if (newVal !== fromParsed) {
            return slider.val([newVal, null]);
          }
        });
        return scope.$watch('ngFrom', function(newVal, oldVal) {
          if (newVal !== toParsed) {
            return slider.val([null, newVal]);
          }
        });
        */
      }
      
      
      
     
    //END PAR SLIDER
    }
  };
});
		   


// ---
// generated by coffee-script 1.9.2